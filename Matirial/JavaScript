Javascript Interview Questions

General interview questions for a front-end JS developer.

Questions

What is the spec Javascript implements and what versions of it are you most current with?

Does JavaScript support the use of classes?

What is the prototype of an object?

What is prototypal inheritance?

What is the DOM?

What are the two types of event propagation?

What is the difference between event bubbling and event capturing for DOM events?

What is the “this” keyword and what does it reference?

How does scope in Javascript differ from other languages?

What is hoisting?

What is a closure?

What is the module pattern and what problem does it attempt to solve?

What is dependecy injection?

Do you have any experience with RequireJS or CommonJS?

What front end frameworks have you worked with before?

Have you ever worked with AngularJS?

What are directives and how are they used?

What are services and what purpose do they serve?

What's your favorite thing about JS?

What is your least favorite thing about JS?

Generally speaking, what is the slowest operation you can perform on the front-end with JS?

What does the 'use strict' declaration do?

What different in the arguments variable in a function when 'use strict' is declared?

What kinds of techniques can you use to call a web service from another domain?

What is a CORS request?

What browsers support CORS requests?

How do you do a CORS request in IE9 and what caveats must you work around?

What does the defer attribute do when loading a script tag?

What is Cross-Site Scripting?

What is the Same Origin Policy?

What is Cross-Site Request Forgery?

What are some of the new JavaScript features in HTML5?

What is a WebSocket?

What is test driven development?

What's the difference between a unit test and an integration test?

What is NodeJs?

What engine powers NodeJs?

Tests

Write a function that will iterate over an array of emails and will call sendEmail({email}) with each item.
Write a function that will return the manager of a user from a nested heirarchy.

Essential JavaScript Interview Questions

1. Explain the result of output:

(function test () {
	console.log(
		{}.constructor === arguments.constructor,
		[].constructor === arguments.constructor
	);
})();
2. Explain the result of output:

(function test (arguments) {
	console.log(arguments[0]);
})(100);
(function test () {
    var arguments;
	console.log(arguments[0]);
})(200);
(function test() {
	function sum() {
		var sum = 0, i;
		for (i in arguments) {
			sum += i;
		}
		return sum;
	}

	console.log(sum(10, 20, 30, 40, 50));
})();
3. Explain the result of output:

(function test() {
	console.log(
		function () {} instanceof Object,
		function () {} instanceof Function,
		Function instanceof Object,
		Object instanceof Function
	);
})();
4. Explain the result of output:

(function test() {
	console.log(
		function () {}.apply.length
	);
})();
5. EXPLAIN THE RESULT OF OUTPUT:

5.1 Function & Function.prototype

console.log(
	Function instanceof Function,
	Function.prototype instanceof Function,
	Function.prototype.isPrototypeOf(Function),
	Function === Function.prototype,
	Function === Function.prototype.constructor,
	typeof Function.prototype,
	typeof Function
)
(function test() {
	console.log(
		Function === Object.constructor,
		Function === Number.constructor,
		Function === Function.constructor,
		Function === Window.constructor,
		Object === Object.prototype.constructor,
		Number === Number.prototype.constructor,
		Array === Array.prototype.constructor,
		Window === Window.prototype.constructor
	);
})();
6. Explain the result of output:

(function test() {
	console.log(
		typeof Object.prototype,
		typeof String.prototype,
		typeof RegExp.prototype
	);
})();
(function test() {
	console.log(
		typeof undefined,
		typeof typeof undefined,
		typeof null,
		typeof 1 / null,
		typeof [],
		typeof {},
		typeof document
	);
})();
(function test() {
	console.log(
		typeof Infinity,
		typeof NaN,
		typeof {null: null}.null,
		typeof {NaN: NaN}.NaN,
		typeof {Infinity: Infinity}.Infinity
	);
})();
7. Explain the result of output:

(function test() {
	var fn = function () {
		return this * 2;
	};

	console.log(fn.apply(undefined));
	console.log(fn.apply(null));
	console.log(fn.apply(1));
})();
(function test() {
	'use strict';
	var fn = function () {
		return this * 2;
	};

	console.log(fn.apply(undefined));
	console.log(fn.apply(null));
	console.log(fn.apply(1));
})();
8. Explain the result of output:

(function test() {
	console.log(
		Object.prototype.toString.call([]),
		Object.prototype.toString.call({}),
		Object.prototype.toString.call(Window),
		(16).toString(16),
		(true).toString(16),
		(false).toString(16)
	);
})();
9. Explain the result of output:

(function test() {
	var sum = function (a, b) {
		return a + b;
	};
	console.log(typeof sum.call.apply);
	console.log(sum.call.apply(null, [1, 2]));
})();
10. Explain the result of output:

(function test() {
	console.log(void (p = 1 / ""), p);
})();
11. Explain the result of output:

(function test() {
	(function () {
		a = 1;
		var a = 2;
	})();
	console.log(a);
})();
(function test() {
	var a = 1;
	function test() {
		if (!a) {
			var a = 10;
		}
		console.log(a);
	}
	test();
	console.log(a);
})();
(function test() {
	(function () {
		var a = b = 3;
	})();

	console.log(
		typeof a,
		typeof b
	);
})();
12. Which a variant is preferable and why?

(function test() {
	console.log(error !== undefined && error.x);
})();
(function test() {
	console.log(typeof error !== 'undefined' && error.x);
})();
13. Explain the result of output:

13.1

(function test() {
	var a = [];
	a[100] = undefined;
	console.log(a.length);
	
	var b = new Array('100');
	console.log(b.length);
})();
13.2

(function test() {
	var a = [];

	console.log(
		a.length,
		[,].length,
		[, ,].length
	);

	a.length = -1;
	console.log(a.length);
})();
13.3

(function test() {
	var a = [1, 2, 3, 4, 5];
	
	a.length = null;
	console.log(a[4]);
})();
13.4

(function test() {
	var b = [1, 2, 3, 4, 5];
    
    b.length = undefined;
    console.log(b[4]);
})();
13.5

(function test() {
    console.log(
        [1,2,[3,4]] + [[5,6], 7, 8]
    );
    console.log([[[1], 2], 3].length);
})();
14. Explain the result of output:

(function test() {
	console.log(
		9 < 5 < 1,
		2 < 6 < 1,
		1 < 3 < 4
	);
})();
15. Explain the result of output:

(function test() {
	function fn() {
		return
		{
			value: "test"
		}
	}

	console.log(
		typeof fn()
	);
})();
16. Explain the result of output:

(function test() {
	function sum(a, b) {
		return a + b;
	}

	function sum(c) {
		return c;
	}

	console.log(sum(3));
	console.log(sum(2, 4));
})();
17. Explain the result of output:

(function test() {
	a = 1;
	window.b = 2;
	this.c = 3;
	var d = 4;

	delete a;
	delete b;
	delete c;
	delete d;

	console.log(typeof a, typeof b, typeof c, typeof d);
})();
18. Explain the result of output:

(function test() {
	var a = 1;

	setTimeout(function () {
		a = 0;
		console.log('Hi!');
	}, 0);

	while (a) {
	}
	console.log('Hello!');
})();
19. Explain the result of output:

(function test() {
	console.log(
		[] - [],
		[] + [],
		{} - {},
		{} + {}
	);
})();
20. Explain the result of output:

(function test() {
	var holder = {value: 1},
		holder2 = holder;

	holder.result = holder = {value: 0};

	console.log(
		holder.result,
		holder2
	);
})();
21. Explain the result of output:

(function test() {
	var test = {
		property: 'Value',

		getPropertyValue: function () {
			return this.property;
		}
	};

	var getPropertyValue = test.getPropertyValue;

	console.log(
		getPropertyValue(),
		test.getPropertyValue()
	);
})();
(function test () {
	"use strict";
	
	var holder, fn;
	holder = {
		holderFn: function () {
			console.log(this);
		}
	};
	fn = holder.holderFn;
	
	holder.holderFn();
	fn();
})();
22. What is the maximum depth of the stack, starting with the "test" function?

<script>
    var a = [1, 2, 3, 4, 5];
    
    (function test() {
        console.log((new Error()).stack);
    
        var item = a.pop();
        item && setTimeout(arguments.callee, 0);
    })();
</script>
var a = [1, 2, 3, 4, 5];

(function test() {
    console.log((new Error()).stack);

    var item = a.pop();
    item && arguments.callee();
})();
23. Explain the result of output:

(function test() {
	function fn() {
		arguments.callee.count = arguments.callee.count || 0;
		return arguments.callee.count++;
	}

	console.log(
		fn(),
		fn(),
		fn()
	);
})();
24. Explain the result of output:

(function test() {
	var a = '5', b = 2, c = a+++b;
	console.log(c);
})();
25. EXPLAIN THE RESULT OF OUTPUT:

25.1 Arithmetic OPERATORS

console.log(
	3+-+2+-+1,
	016 * 2,
	0x16 * 2,
	0.1 + 0.2,
	0.1 + 0.2 === 0.3,
	(0.1 + 0.2) + 0.3 === 0.1 + (0.2 + 0.3)
);
console.log(
	Math.floor(999.99) === ~~999.99,
	Math.floor(-999.99) === ~~-999.99,
	~function(){}(),
	~~function(){}(),
	~~null,
	~~undefined,
	~~[],
	~~{},
	~~'Test'
);
console.log(
	1 + "2" + "2",
	1 + +"2" + "2",
	1 + -"1" + "2",
	+"1" + "1" + "2",
	"2" * 3,
	"6" / 2,
	"A" - "B" + "2",
	"A" - "B" + 2
);
console.log(
	Number('Test!'),
	Number(''),
	Number('00010'),
	Number(true),
	Number(NaN),
	parseInt('2', 2),
	parseInt('011', 8),
	parseInt('011', 10),
	parseInt('00C', 16),
	parseInt([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]),
	1 / -0,
	isNaN(1 / -0),
	isFinite(1 / -0),
	0 / -0,
	isNaN(0 / -0),
	isFinite(0 / -0),
	1 / 0,
	isNaN(1 / 0),
	isFinite(1 / 0),
	0 / 0,
	isNaN(0 / 0),
	isFinite(0 / 0),
	NaN === NaN,
	Infinity === Infinity
);
26. Explain the result of output:

console.log(true == [1] && true == [2]);
console.log(
	new Boolean() == true,
	new Boolean("") == true,
	new Boolean("0") == true,
	new Boolean("1") == true,
	new Boolean("true") == true
);
console.log(
	false == '0',
	false === '0',
	true == '1',
	true === '1',
	true == '2',
	true === '2'
);
27. Explain the result of output:

(function () {
    var fn = function () {
        console.log(typeof this);
    };
    fn.call("Hello World!");
})();

(function () {
    "use strict";
    var fn = function () {
        console.log(typeof this);
    };
    fn.call("Hello World!");
})();
console.log(
	(function () {
		return (new this).stack;
	}).apply(Error)
);
28. Explain the result of output:

(function test() {
	var a = {},
		b = {value: 'test1'},
		c = {value: 'test2'};

	a[b] = 'test3';
	a[c] = 'test4';

	console.log(a[b]);
})();
29. Explain the result of output:

console.log(
	Date(),
	new Date,
	+Date(),
	+new Date,
	+new Date(),
	+new Date() === +new Date
);
30. Explain the result of output:

console.log(typeof confirm('Do you like JavaScript?'));
31. Eliminate non-existent state of promise.

fulfilled
awaiting
pending
refused
rejected
interrupted
32. Explain the result of output:

(function test() {
	console.log(
		[1, 2, 3, 4, 5].map(function (n) {
			return n === 1 && 1 || arguments.callee(n - 1) * n;
		})
	);
})();
(function test() {
	"use strict";
	console.log(
		[1, 2, 3, 4, 5].map(function (n) {
			return n === 1 && 1 || arguments.callee(n - 1) * n;
		})
	);
})();
33. Explain the result of output:

(function test() {
	var s1 = 'test',
		s2 = new String('test'),
		s3 = String('test');

	console.log(
		s1 == s2,
		s1 === s2,
		s1 == s3,
		s1 === s3,
		s1.constructor === s2.constructor,
		s1.constructor === s3.constructor,
		typeof s1,
		typeof s2,
		typeof s3
	);

	console.log(
		s1.slice() == s1,
		s1.slice() == s2,
		s1.slice() == s3,
		s1.slice() === s1,
		s1.slice() === s2,
		s1.slice() === s3
	);

	s1[2] = 'w';
	console.log(s1);
})();
34. Explain the result of output:

(function test() {
	var a = [1, 2, 3],
		b = a.reverse(),
		c = [4, 5, 6];

	b.push(c);

	console.log(a.length, b.length);
	console.log(a.slice(-1));
	console.log(b.slice(-1));
})();
35. Explain the result of output:

(function test() {
	for (var i = 0; i < 5; i++) {
		setTimeout(function () {
			console.log(i);
		}, 0)
	}
})();
36. Explain the result of output:

<script>
    Object.defineProperty(this, "value", {
        value: 100,
        writable: false
    });
    
    value = 200;
    
    console.log(window.value, this.value, value);
</script>
<script>
    Object.defineProperty(this, "variable", {
        value: 100,
        configurable: false
    });
    
    console.log(delete variable);
</script>
<script>
    var a = 100;
    console.log(Object.getOwnPropertyDescriptor(this, "a"));
    
    b = 200;
    console.log(Object.getOwnPropertyDescriptor(this, "b"));
</script>
37. Explain the result of output:

(function test() {
	var Factory = function () {
		var a = [];
		a[Array.prototype.pop.apply(arguments)] = 1;
		return a;
	};

	console.log(
		Factory(0).length,
		Factory(100).length,
		Factory(Infinity).length,
		Factory(NaN).length
	);
})();
38. Explain the result of output when the page is fully loaded:

<html>
    <head>
        <script>
            setTimeout(function () {
                console.log(
                        performance.now() > 5000
                );
            }, 10000);
        </script>
    </head>
    <body>
    </body>
</html>
39. Do you see the pitfalls in the code?

<html>
    <body>
        <script>
              function nodeHouse(id) {
                var node;
                return {
                  make: function () {
                    node = document.createElement("div");
                    node.setAttribute('id', id);
                    document.body.appendChild(node);
                    return this;
                  },
                  destroy: function () {
                    document.body.removeChild(node);
                    return this;
                  },
                  test: function () {
                    return node.getAttribute('id') == id;
                  }
                };
              }
            
              var nodesHouse = [],
                      currentNodeHouse;
            
              for (var i = 0; i < 100000; i++) {
                nodesHouse.push(currentNodeHouse = nodeHouse(i));
                currentNodeHouse.make().destroy();
              }
        </script>
    </body>
</html>
40. How can we prevent a memory leak?

var Key = function (key) {
	this.key = key;
};

var map = new Map();

function addToMap() {
	var currentKey = new Key(100);
	map.set(currentKey, {});
	currentKey = null;

	setTimeout(addToMap);
}

setTimeout(addToMap);
41. Explain the result of output:

(function () {
	var dynamicCode = '(function () {return this}())';

	console.log(
		eval(dynamicCode),
		eval.call(null, dynamicCode)
	);
})();

(function () {
	'use strict';
	var dynamicCode = '(function () {return this}())';

	console.log(
		eval(dynamicCode),
		eval.call(null, dynamicCode)
	);
})();
42. EXPLAIN THE RESULT OF OUTPUT:

42.1 FUNCTION CONSTRUCTOR SCOPE

(function () {
	var a = 1;
	(new Function('a = 2'))();
	console.log('a1:', a)
})();

console.log('a2:', a)
42.2 FUNCTION CONSTRUCTOR SCOPE

(function () {
	var b = 3;
	(new Function('b = 4')).call(this);
	console.log('b1:', b);
})();

console.log('b2:', b);
42.3 FUNCTION CONSTRUCTOR SCOPE, STRICT MODE

(function () {
	'use strict';

	var c = 5;
	(new Function('c = 6'))();
	console.log('c1:', c);
})();

console.log('c2:', c);
(function () {
	'use strict';

	var c = 5;
	(new Function('"use strict"; c = 6'))();
	console.log('c3:', c);
})();

console.log('c4:', c);
42.4 FUNCTION CONSTRUCTOR SCOPE, STRICT MODE

(function () {
	'use strict';

	var d = 7;
	(new Function('d = 8')).call(this);
	console.log('d1:', d);
})();

console.log('d2:', d);
(function () {
	'use strict';

	var d = 7;
	(new Function('"use strict"; d = 8')).call(this);
	console.log('d3:', d);
})();

console.log('d4:', d);
43. EXPLAIN THE RESULT OF OUTPUT:

43.1 FUNCTION CONSTRUCTOR, STRICT MODE

(function () {
	console.log(
		new Function('return this')()
	);
	console.log(
		new Function('"use strict"; return this')()
	);
})();
43.2 FUNCTION CONSTRUCTOR, STRICT MODE

(function () {
	'use strict';

	console.log(
		new Function('return this')()
	);
	console.log(
		new Function('"use strict"; return this')()
	);
})();
43.3 FUNCTION CONSTRUCTOR, STRICT MODE

(function () {
	console.log(
		new Function('return arguments[0]')()
	);
	console.log(
		new Function('"use strict"; return arguments[0]')()
	);
})(123);
43.4 FUNCTION CONSTRUCTOR, STRICT MODE

(function () {
	'use strict';
	
	console.log(
		new Function('return arguments[0]')()
	);
	console.log(
		new Function('"use strict"; return arguments[0]')()
	);
})(123);
44. EXPLAIN THE RESULT OF OUTPUT:

44.1 FUNCTION DECLARATION, HOISTING

(function test() {
    fn();

    function fn () {
        console.log('The function is called!');
    }
})();
44.2 FUNCTION EXPRESSION, HOISTING

(function test() {
    fn();

    var fn = function () {
        console.log('The function is called!');
    }
})();
44.3 FUNCTION EXPRESSION, HOISTING

(function test() {
    myFn();

    var fn = function myFn() {
        console.log('The myFn function is called!');
    }
})();
45. YOU NEED TO IMPLEMENT:

45.1 "MULTIPLY" FUNCTION. NUMBER INSTANCES

console.log((33).multiply(2));  // 66
console.log((33).multiply(3));  // 99
45.2 "DUPLICATION" FUNCTION. STRING INSTANCES

console.log('HELLO'.duplication());	// HELLOHELLO
46. EXPLAIN THE RESULT OF OUTPUT:

46.1 COMMA OPERATOR

console.log(
	typeof (true, '1', 1)
);
46.2 COMMA OPERATOR

(function test() {
	var x, y, z;
	x = (y = 1, z = 2);
	
	console.log(x);
})();
47. EXPLAIN THE RESULT OF OUTPUT:

47.1 new OPERATOR

var testClass1 = function () {
	return new Number(1);
};

var testClass2 = function () {
	return Number(2);
};

console.log(
	new testClass1 instanceof testClass1,
	new testClass2 instanceof testClass2
);
48. YOU NEED TO IMPLEMENT:

48.1 instanceof OPERATOR

var testClass = function () {}
<YOUR_CODE_HERE>
console.log(new testClass instanceof Array); // true
48.2 instanceof OPERATOR

var testClass1 = function () {
    <YOUR_CODE_HERE>
}
var testClass2 = function () {
    <YOUR_CODE_HERE>
}

var object1 = new testClass1();
var object2 = testClass1();

console.log(object1 instanceof testClass1 === object2 instanceof testClass1);       // true
console.log(object1 instanceof testClass2 === object2 instanceof testClass2);       // true
49. YOU NEED TO IMPLEMENT:

49.1 isPrototypeOf OPERATOR

var testObject1 = {x: 1};
var testObject2 = <YOUR_CODE_HERE>
	
console.log(
	testObject1.isPrototypeOf(testObject2)              // true
); 
49.2 isPrototypeOf OPERATOR

var testClass1 = function () {};
var testClass2 = function () {};

<YOUR_CODE_HERE>

console.log(
	testClass1.prototype.isPrototypeOf(new testClass2)  // true 
);  




================================================================================
General Questions:

What did you learn yesterday/this week?
What excites or interests you about coding?
What is a recent technical challenge you experienced and how did you solve it?
What UI, Security, Performance, SEO, Maintainability or Technology considerations do you make while building a web application or site?
Talk about your preferred development environment.
Which version control systems are you familiar with?
Can you describe your workflow when you create a web page?
If you have 5 different stylesheets, how would you best integrate them into the site?
Can you describe the difference between progressive enhancement and graceful degradation?
How would you optimize a website's assets/resources?
How many resources will a browser download from a given domain at a time?
What are the exceptions?
Name 3 ways to decrease page load (perceived or actual load time).
If you jumped on a project and they used tabs and you used spaces, what would you do?
Describe how you would create a simple slideshow page.
What tools do you use to test your code's performance?
If you could master one technology this year, what would it be?
Explain the importance of standards and standards bodies.
What is Flash of Unstyled Content? How do you avoid FOUC?
Explain what ARIA and screenreaders are, and how to make a website accessible.
Explain some of the pros and cons for CSS animations versus JavaScript animations.
HTML Questions:

What does a doctype do?
What's the difference between standards mode and quirks mode?
What's the difference between HTML and XHTML?
Are there any problems with serving pages as application/xhtml+xml?
How do you serve a page with content in multiple languages?
What kind of things must you be wary of when design or developing for multilingual sites?
What are data- attributes good for?
Consider HTML5 as an open web platform. What are the building blocks of HTML5?
Describe the difference between a cookie, sessionStorage and localStorage.
Describe the difference between <script>, <script async> and <script defer>.
Why is it generally a good idea to position CSS <link>s between <head></head> and JS <script>s just before </body>? Do you know any exceptions?
CSS Questions:

What is the difference between classes and ID's in CSS?
What's the difference between "resetting" and "normalizing" CSS? Which would you choose, and why?
Describe Floats and how they work.
Describe z-index and how stacking context is formed.
What are the various clearing techniques and which is appropriate for what context?
Explain CSS sprites, and how you would implement them on a page or site.
What are your favourite image replacement techniques and which do you use when?
How would you approach fixing browser-specific styling issues?
How do you serve your pages for feature-constrained browsers?
What techniques/processes do you use?
What are the different ways to visually hide content (and make it available only for screen readers)?
Have you ever used a grid system, and if so, what do you prefer?
Have you used or implemented media queries or mobile specific layouts/CSS?
Any familiarity with styling SVG?
How do you optimize your webpages for print?
What are some of the "gotchas" for writing efficient CSS?
What are the advantages/disadvantages of using CSS preprocessors?
Describe what you like and dislike about the CSS preprocessors you have used.
How would you implement a web design comp that uses non-standard fonts?
Explain how a browser determines what elements match a CSS selector.
Explain your understanding of the box model and how you would tell the browser in CSS to render your layout in different box models.
What does * { box-sizing: border-box; } do? What are its advantages?
List as many values for the display property that you can remember.
What's the difference between inline and inline-block?
What's the difference between a relative, fixed, absolute and statically positioned element?
The 'C' in CSS stands for Cascading. How is priority determined in assigning styles (a few examples)? How can you use this system to your advantage?
What existing CSS frameworks have you used locally, or in production? How would you change/improve them?
Have you played around with the new CSS Flexbox or Grid specs?
How is responsive design different from adaptive design?
Have you ever worked with retina graphics? If so, when and what techniques did you use?
Is there any reason you'd want to use translate() instead of absolute positioning, or vice-versa? And why?
JS Questions:

Explain event delegation
Explain how this works in JavaScript
Explain how prototypal inheritance works
How do you go about testing your JavaScript?
What do you think of AMD vs CommonJS?
Explain why the following doesn't work as an IIFE: function foo(){ }();.
What needs to be changed to properly make it an IIFE?
What's the difference between a variable that is: null, undefined or undeclared?
How would you go about checking for any of these states?
What is a closure, and how/why would you use one?
What's a typical use case for anonymous functions?
How do you organize your code? (module pattern, classical inheritance?)
What's the difference between host objects and native objects?
Difference between: function Person(){}, var person = Person(), and var person = new Person()?
What's the difference between .call and .apply?
Explain Function.prototype.bind.
When would you use document.write()?
What's the difference between feature detection, feature inference, and using the UA string?
Explain AJAX in as much detail as possible.
Explain how JSONP works (and how it's not really AJAX).
Have you ever used JavaScript templating?
If so, what libraries have you used?
Explain "hoisting".
Describe event bubbling.
What's the difference between an "attribute" and a "property"?
Why is extending built in JavaScript objects not a good idea?
Difference between document load event and document ready event?
What is the difference between == and ===?
Explain the same-origin policy with regards to JavaScript.
Make this work:
duplicate([1,2,3,4,5]); // [1,2,3,4,5,1,2,3,4,5]
Why is it called a Ternary expression, what does the word "Ternary" indicate?
What is "use strict";? what are the advantages and disadvantages to using it?
Create a for loop that iterates up to 100 while outputting "fizz" at multiples of 3, "buzz" at multiples of 5 and "fizzbuzz" at multiples of 3 and 5
Why is it, in general, a good idea to leave the global scope of a website as-is and never touch it?
Why would you use something like the load event? Does this event have disadvantages? Do you know any alternatives, and why would you use those?
Explain what a single page app is and how to make one SEO-friendly.
What is the extent of your experience with Promises and/or their polyfills?
Network Questions:

Traditionally, why has it been better to serve site assets from multiple domains?
Do your best to describe the process from the time you type in a website's URL to it finishing loading on your screen.
What are the differences between Long-Polling, Websockets and Server-Sent Events?
Explain the following request and response headers:
Diff. between Expires, Date, Age and If-Modified-...
Do Not Track
Cache-Control
Transfer-Encoding
ETag
X-Frame-Options
Can you explain the difference between GET and POST?
Can you explain the difference between GET and HEAD?
Coding Questions:

Question: What is the value of foo?

var foo = 10 + '20';
Question: How would you make this work?

add(2, 5); // 7
add(2)(5); // 7
Question: What value is returned from the following statement?

"i'm a lasagna hog".split("").reverse().join("");
Question: What is the value of window.foo?

( window.foo || ( window.foo = "bar" ) );
Question: What is the outcome of the two alerts below?

var foo = "Hello";
(function() {
  var bar = " World";
  alert(foo + bar);
})();
alert(foo + bar);
Question: What is the value of foo.length?

var foo = [];
foo.push(1);
foo.push(2);
Fun Questions:

What's a cool project that you've recently worked on?
What are some things you like about the developer tools you use?
Do you have any pet projects? What kind?
What's your favorite feature of Internet Explorer?

