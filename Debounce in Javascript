Implementing Debounce in Javascript


I am generally pretty comfortable with `this`-binding in javascript, but today I managed to confuse myself for a few minutes. I was implementing a simple debounce function for fun and found myself lost in a web of `this`.

Debouncing makes it so a function can only be executed after a certain amount of time since it was last invoked. For example, “only execute this function if it has been 1000 milliseconds since it was last invoked.”

A common use case for debouncing is in search bars. We don’t want to make expensive http requests while the user is still typing their query, so we debounce the requesting function and only invoke it once the user has stopped typing.



function debounce(func, wait) {
  let timeout
  return function(...args) {
    const context = this
    clearTimeout(timeout)
    timeout = setTimeout(() => func.apply(context, args), wait)
  }
}

function sayHello() {
  console.log('My name is', this.name)
}

const amy = {
  name: 'Ugra',
  speak: debounce(sayHello),
}

amy.speak()
// 'My name is Ugra'


function debounce(fn, wait, immediate) {  
  let timeout
  return (...args) => {
    if (immediate && !timeout) {
      fn.apply(this, args)
    }
    clearTimeout(timeout)
    timeout = setTimeout(() => {
      timeout = null
      if (!immediate) {
        fn.apply(this, args)
      }
    }, wait)
  }
}

// usage
let checkPositionFromBottom = debounce(() => {  
  // do your thing!
}, 250)

window.addEventListener('scroll', checkPositionFromBottom) 
